name: Build Windows Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.35.1"

      - name: Enable Windows Desktop
        run: flutter config --enable-windows-desktop

      - name: Doctor
        run: flutter doctor -v

      - name: Get dependencies
        run: flutter pub get

      - name: Build Windows Release
        run: |
          flutter clean
          # 设置环境变量确保使用发布版运行时
          $env:CMAKE_BUILD_TYPE = "Release"
          flutter build windows --release --dart-define=CMAKE_BUILD_TYPE=Release --verbose > build_log.txt 2>&1 || type build_log.txt
          # 即使构建命令返回错误，也继续执行后续步骤以便查看日志

      - name: Check build artifacts
        run: |
          # 列出 build 目录内容，查看构建产生了什么
          Write-Host "Contents of build directory:"
          Get-ChildItem -Path build -Recurse -Name -ErrorAction SilentlyContinue
          # 如果 build/windows 存在，特别列出其内容
          if (Test-Path -Path "build\windows") {
            Write-Host "Contents of build/windows directory:"
            Get-ChildItem -Path build\windows -Recurse -Name -ErrorAction SilentlyContinue
          }

      - name: Find Windows exe
        id: find_exe
        run: |
          # 更智能地查找可执行文件
          # 首先尝试在 runner 目录中查找
          $potentialPaths = @(
            "build\windows\x64\runner\Release\*.exe",
            "build\windows\runner\Release\*.exe"
          )
          
          $exe = $null
          foreach ($path in $potentialPaths) {
            $found = Get-ChildItem -Path $path -File -ErrorAction SilentlyContinue | 
                     Where-Object { $_.Name -notmatch "CompilerId|flutter_windows" } | 
                     Select-Object -First 1
            if ($found) {
              $exe = $found
              break
            }
          }
          
          # 如果没找到，尝试递归查找但不排除任何文件
          if (-not $exe) {
            $allExes = Get-ChildItem -Path build -Recurse -Filter *.exe -File -ErrorAction SilentlyContinue
            $exe = $allExes | Where-Object { 
              $_.FullName -match "runner.*Release" -and $_.Name -notmatch "CompilerId|flutter_windows"
            } | Select-Object -First 1
          }
          
          if (-not $exe) {
            # 如果还是没找到，选择第一个不是 CompilerId 的 exe
            $exe = $allExes | Where-Object { $_.Name -notmatch "CompilerId" } | Select-Object -First 1
          }
          
          if (-not $exe) {
            Write-Error "No application exe found. Build might have failed."
            exit 1
          }
          
          echo "Found application exe at $($exe.FullName)"
          echo "exe_path=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Verify EXE dependencies
        run: |
          # 使用上一步找到的应用程序 exe 文件
          $exePath = "${{ steps.find_exe.outputs.exe_path }}"
          Write-Host "Checking dependencies of application: $exePath"
          
          # 尝试找到 dumpbin.exe
          $vswherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $dumpbinPath = $null
          
          if (Test-Path $vswherePath) {
            $vsInstallPath = & $vswherePath -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
            $potentialDumpbinPath = Join-Path $vsInstallPath "VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe"
            $dumpbinPath = (Get-Item $potentialDumpbinPath -ErrorAction SilentlyContinue).FullName | Select-Object -First 1
          }
          
          # 如果没找到，尝试其他可能路径
          if (-not $dumpbinPath -or -not (Test-Path $dumpbinPath)) {
            $potentialPaths = @(
              "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
              "C:\Program Files\Microsoft Visual Studio\2022\Professional\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
              "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
              "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
              "C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
              "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe"
            )
            
            foreach ($path in $potentialPaths) {
              $foundPath = (Get-Item $path -ErrorAction SilentlyContinue).FullName | Select-Object -First 1
              if ($foundPath -and (Test-Path $foundPath)) {
                $dumpbinPath = $foundPath
                break
              }
            }
          }
          
          if ($dumpbinPath -and (Test-Path $dumpbinPath)) {
            Write-Host "Using dumpbin at: $dumpbinPath"
            
            # 检查依赖项
            $dependencies = & $dumpbinPath /dependents $exePath
            Write-Host $dependencies
            
            # 检查是否包含调试版 DLL
            if ($dependencies -match "ucrtbased\.dll|VCRUNTIME140D\.dll") {
              Write-Error "Application EXE still depends on debug DLLs!"
              exit 1
            } else {
              Write-Host "Application EXE does not depend on debug DLLs. Good!"
            }
          } else {
            Write-Warning "dumpbin.exe not found. Skipping dependency verification."
          }

      - name: Create zip
        run: |
          $zipDir = "build\windows\release_zip"
          New-Item -ItemType Directory -Path $zipDir -Force
          Copy-Item -Path "${{ steps.find_exe.outputs.exe_path }}" -Destination $zipDir
          $exeName = [System.IO.Path]::GetFileName("${{ steps.find_exe.outputs.exe_path }}")
          Compress-Archive -Path "$zipDir\$exeName" -DestinationPath "build\flutter_windows_app.zip" -Force

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: build/flutter_windows_app.zip
          tag_name: ${{ github.ref_name }}
