name: Build Windows Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.35.1"

      - name: Enable Windows Desktop
        run: flutter config --enable-windows-desktop

      - name: Doctor
        run: flutter doctor -v

      - name: Get dependencies
        run: flutter pub get

      - name: Build Windows Release
        run: |
          flutter clean
          # 设置环境变量确保使用发布版运行时
          $env:CMAKE_BUILD_TYPE = "Release"
          flutter build windows --release --dart-define=CMAKE_BUILD_TYPE=Release
          
      - name: Verify EXE dependencies
        run: |
          # 找到可执行文件
          $exe = Get-ChildItem -Path build\windows -Recurse -Filter *.exe | Where-Object { $_.Name -notlike "*flutter*" } | Select-Object -First 1
          if (-not $exe) {
            Write-Error "No exe found."
            exit 1
          }
          
          Write-Host "Checking dependencies of $($exe.FullName)"
          
          # 方法一：尝试使用 vswhere 定位 dumpbin.exe (更可靠)
          # 首先尝试找到最新版本的 Visual Studio 安装路径中的 dumpbin
          $vswherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (Test-Path $vswherePath) {
            $vsInstallPath = & $vswherePath -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
            $dumpbinPath = Join-Path $vsInstallPath "VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe"
            $dumpbinPath = (Get-Item $dumpbinPath).FullName | Select-Object -First 1
          }
          
          # 方法二：如果 vswhere 没找到，尝试一个常见的路径
          if (-not $dumpbinPath -or -not (Test-Path $dumpbinPath)) {
            $potentialDumpbinPath = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\dumpbin.exe"
            if (Test-Path $potentialDumpbinPath) {
              $dumpbinPath = $potentialDumpbinPath
            }
          }
          
          # 如果找到了 dumpbin.exe，执行检查
          if ($dumpbinPath -and (Test-Path $dumpbinPath)) {
            Write-Host "Using dumpbin at: $dumpbinPath"
            & $dumpbinPath /dependents $exe.FullName
            
            # 检查是否仍然依赖调试版 DLL
            $dependencies = & $dumpbinPath /dependents $exe.FullName
            if ($dependencies -match "ucrtbased\.dll|VCRUNTIME140D\.dll") {
              Write-Error "EXE still depends on debug DLLs!"
              exit 1
            }
          } else {
            Write-Warning "dumpbin.exe not found. Skipping dependency verification."
            # 这里不要退出，因为构建本身可能是成功的，只是验证步骤跳过
          }

      - name: Find Windows exe
        id: find_exe
        run: |
          $exe = Get-ChildItem -Path build\windows -Recurse -Filter *.exe | Where-Object { $_.Name -notlike "*flutter*" } | Select-Object -First 1
          if (-not $exe) {
            Write-Error "No exe found. Build might have failed."
            exit 1
          }
          echo "Found exe at $($exe.FullName)"
          echo "exe_path=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Create zip
        run: |
          $zipDir = "build\windows\release_zip"
          New-Item -ItemType Directory -Path $zipDir -Force
          Copy-Item -Path "${{ steps.find_exe.outputs.exe_path }}" -Destination $zipDir
          $exeName = [System.IO.Path]::GetFileName("${{ steps.find_exe.outputs.exe_path }}")
          Compress-Archive -Path "$zipDir\$exeName" -DestinationPath "build\flutter_windows_app.zip" -Force

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: build/flutter_windows_app.zip
          tag_name: ${{ github.ref_name }}
