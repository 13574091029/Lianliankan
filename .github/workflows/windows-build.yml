name: Build Windows Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.35.1"

      - name: Enable Windows Desktop
        run: flutter config --enable-windows-desktop

      - name: Doctor
        run: flutter doctor -v

      - name: Get dependencies
        run: flutter pub get

      - name: Build Windows Release
        run: |
          flutter clean
          # 设置环境变量确保使用发布版运行时
          $env:CMAKE_BUILD_TYPE = "Release"
          flutter build windows --release --dart-define=CMAKE_BUILD_TYPE=Release

      - name: Find Windows exe
        id: find_exe
        run: |
          # 查找应用程序的主要可执行文件，通常在 runner/Release 目录下
          $exe = Get-ChildItem -Path build\windows\runner\Release -Filter *.exe | Where-Object { $_.Name -notlike "*flutter*" } | Select-Object -First 1
          if (-not $exe) {
            Write-Error "No application exe found in runner/Release. Build might have failed."
            exit 1
          }
          echo "Found application exe at $($exe.FullName)"
          echo "exe_path=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Verify EXE dependencies
        run: |
          # 使用上一步找到的应用程序 exe 文件
          $exePath = "${{ steps.find_exe.outputs.exe_path }}"
          Write-Host "Checking dependencies of application: $exePath"
          
          # 尝试找到 dumpbin.exe
          $vswherePath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $dumpbinPath = $null
          
          if (Test-Path $vswherePath) {
            $vsInstallPath = & $vswherePath -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
            $potentialDumpbinPath = Join-Path $vsInstallPath "VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe"
            $dumpbinPath = (Get-Item $potentialDumpbinPath -ErrorAction SilentlyContinue).FullName | Select-Object -First 1
          }
          
          # 如果没找到，尝试其他可能路径
          if (-not $dumpbinPath -or -not (Test-Path $dumpbinPath)) {
            $potentialPaths = @(
              "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
              "C:\Program Files\Microsoft Visual Studio\2022\Professional\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
              "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
              "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
              "C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
              "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe"
            )
            
            foreach ($path in $potentialPaths) {
              $foundPath = (Get-Item $path -ErrorAction SilentlyContinue).FullName | Select-Object -First 1
              if ($foundPath -and (Test-Path $foundPath)) {
                $dumpbinPath = $foundPath
                break
              }
            }
          }
          
          if ($dumpbinPath -and (Test-Path $dumpbinPath)) {
            Write-Host "Using dumpbin at: $dumpbinPath"
            
            # 检查依赖项
            $dependencies = & $dumpbinPath /dependents $exePath
            Write-Host $dependencies
            
            # 检查是否包含调试版 DLL
            if ($dependencies -match "ucrtbased\.dll|VCRUNTIME140D\.dll") {
              Write-Error "Application EXE still depends on debug DLLs!"
              exit 1
            } else {
              Write-Host "Application EXE does not depend on debug DLLs. Good!"
            }
          } else {
            Write-Warning "dumpbin.exe not found. Skipping dependency verification."
          }

      - name: Create zip
        run: |
          $zipDir = "build\windows\release_zip"
          New-Item -ItemType Directory -Path $zipDir -Force
          Copy-Item -Path "${{ steps.find_exe.outputs.exe_path }}" -Destination $zipDir
          $exeName = [System.IO.Path]::GetFileName("${{ steps.find_exe.outputs.exe_path }}")
          Compress-Archive -Path "$zipDir\$exeName" -DestinationPath "build\flutter_windows_app.zip" -Force

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: build/flutter_windows_app.zip
          tag_name: ${{ github.ref_name }}
